__version__ = (1, 0, 9)

# -------------------------------------------------------------------------------- 
#                                                                                  
# Name: CheckUsername                                                            
# Description: –ø·¥ò–æ–≤·¥á·¥ò–∫·¥Ä –∏–º—è –ø–æ–ª—å–∑–æ–≤·¥Ä—Ç·¥á–ª—è –≤ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç                          
# meta developer: @llocJlednuy_cepafum, @ManulMods                                             
# authors: @llocJlednuy_cepafum, @ManulMods
# version: 1.0.9                                                                                 
#
# ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñÑ ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà ‚ñà‚ñÑ ‚ñÑ‚ñà
# ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ  ‚ñà‚ñÑ‚ñà ‚ñà ‚ñÄ ‚ñà
#
# ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñÑ ‚ñÑ‚ñà ‚ñà‚ñÑ ‚ñÑ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñà ‚ñà   ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ 
#  ‚ñà  ‚ñà ‚ñÄ ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà 
#
# -------------------------------------------------------------------------------- 

from telethon.tl import functions
import logging
from .. import loader, utils

logging.basicConfig(level=logging.INFO)

@loader.tds
class CheckUsername(loader.Module):
    """–ø·¥ò–æ–≤·¥á·¥ò–∫·¥Ä –∏–º—è –ø–æ–ª—å–∑–æ–≤·¥Ä—Ç·¥á–ª—è –≤ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç"""

    strings = {
        "name": "CheckUsername",
        "description": "–ø·¥ò–æ–≤·¥á·¥ò–∫·¥Ä –∏–º—è –ø–æ–ª—å–∑–æ–≤·¥Ä—Ç·¥á–ª—è –≤ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç",
        "authors": "@llocJlednuy_cepafum, @ManulMods",
        "versions": "1.0.7",
        "error": "<emoji document_id=5237814653010076467>üóì</emoji> <b>–Ω·¥á  è–¥·¥Ä–ª–æ—Å—å —Å–æ–≤·¥á·¥ò—à–∏—Ç—å –≤·¥Ä—à–∏ –¥·¥á–π—Å—Ç–≤–∏—è...</b>",
        "check_true": "<emoji document_id=5235875883297824772>üóì</emoji> <b>—é–∑·¥á·¥ò–Ω·¥á–π–º:</b> @{} <b>(–¥–æ—Å—Ç è–ø·¥á–Ω!)</b>",
        "check_false": "<emoji document_id=5237814653010076467>üóì</emoji> <b>—é–∑·¥á·¥ò–Ω·¥á–π–º:</b> @{} <b>(–Ω·¥á –¥–æ—Å—Ç è–ø·¥á–Ω!)</b>",
        "check_false_args": "<emoji document_id=5237814653010076467>üóì</emoji> <b>–ø–æ–∂·¥Ä–ª è–π—Å—Ç·¥Ä –≤–ø–∏—à–∏—Ç·¥á —é–∑·¥á·¥ò–Ω·¥á–π–º –∫–æ—Ç–æ·¥ò—ã–π –≤—ã —Ö–æ—Ç–∏—Ç·¥á –ø·¥ò–æ–≤·¥á·¥ò–∏—Ç—å...</b>"
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

    
    @loader.command()
    async def check(self, message):
        """<—é–∑–µ—Ä–Ω–µ–π–º> - –ø·¥ò–æ–≤·¥á·¥ò—è·¥á—Ç –¥–æ—Å—Ç è–ø–Ω–æ—Å—Ç—å –∏–º·¥á–Ω–∏ –ø–æ–ª—å–∑–æ–≤·¥Ä—Ç·¥á–ª—è"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["check_false_args"])
            return
        
        username = args.strip()

        result = await self.check_username_availability(self._client, username)

        if result:
            await utils.answer(message, self.strings["check_true"].format(username))
        else:
            await utils.answer(message, self.strings["check_false"].format(username))
    
    async def check_username_availability(self, message, username: str) -> bool:
        try:
            request = functions.account.CheckUsernameRequest(username=username)
            result = await self._client(request)
            return result
        except Exception:
            logging.error(f"–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ '{username}'")
            await message.edit(self.strings["error"])

        
