__version__ = (2, 3, 8)

# -------------------------------------------------------------------------------- 
#                                                                                  
# Name: AccountManager                                                             
# Description: –Ω·¥Ä—Å—Ç·¥ò–æ–π–∫·¥Ä –∫–æ–Ω—Ñ–∏–¥·¥á–Ω—Ü–∏·¥Ä–ª—å–Ω–æ—Å—Ç–∏ –≤ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç                          
# meta developer: @ManulMods                                             
# authors: @ManulMods
# version: 2.3.8                                                                                 
#
# ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñÑ ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà ‚ñà‚ñÑ ‚ñÑ‚ñà
# ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ  ‚ñà‚ñÑ‚ñà ‚ñà ‚ñÄ ‚ñà
#
# ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñÑ ‚ñÑ‚ñà ‚ñà‚ñÑ ‚ñÑ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñà ‚ñà   ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ 
#  ‚ñà  ‚ñà ‚ñÄ ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà 
#
# -------------------------------------------------------------------------------- 

from telethon import functions, types
from telethon.tl.functions.users import GetFullUserRequest
import logging
from .. import loader, utils

logging.basicConfig(level=logging.INFO)

@loader.tds
class AccountManager(loader.Module):
    """–Ω·¥Ä—Å—Ç·¥ò–æ–π–∫·¥Ä –∫–æ–Ω—Ñ–∏–¥·¥á–Ω—Ü–∏·¥Ä–ª—å–Ω–æ—Å—Ç–∏ –≤ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç"""

    strings = {
        "name": "AccountManager",
        "description": "–Ω·¥Ä—Å—Ç·¥ò–æ–π–∫·¥Ä –∫–æ–Ω—Ñ–∏–¥·¥á–Ω—Ü–∏·¥Ä–ª—å–Ω–æ—Å—Ç–∏ –≤ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç",
        "authors": "@ManulMods",
        "versions": "2.3.8",
        "error": "<emoji document_id=5237814653010076467>üóì</emoji> –Ω·¥á  è–¥·¥Ä–ª–æ—Å—å —Å–æ–≤·¥á·¥ò—à–∏—Ç—å –∫·¥Ä–∫–∏·¥á-–ª–∏“ï–æ –≤·¥Ä—à–∏ –¥·¥á–π—Å—Ç–≤–∏—è...",
        "bio_success": "<emoji document_id=5229132514060167056>üóì</emoji> <b>“ï–∏–æ  è—Å–ø·¥á—à–Ω–æ –æ“ï–Ω–æ–≤–ª·¥á–Ω–æ!</b>\n<b><emoji document_id=5237814653010076467>üóì</emoji> –Ω–æ–≤–æ·¥á “ï–∏–æ:</b> <code>{}</code>",
        "name_success": "<emoji document_id=5233429444156223307>üóì</emoji> <b>–∏–º—è  è—Å–ø·¥á—à–Ω–æ –∏–∑–º·¥á–Ω·¥á–Ω–æ!</b>\n<b><emoji document_id=5237814653010076467>üóì</emoji> –Ω–æ–≤–æ·¥á –∏–º—è:</b> <code>{}</code>",
        "user_success": "<emoji document_id=5235875883297824772>üóì</emoji> <b>—é–∑·¥á·¥ò–Ω·¥á–π–º –∏–∑–º·¥á–Ω·¥á–Ω!</b>\n<b><emoji document_id=5237814653010076467>üóì</emoji> –Ω–æ–≤—ã–π —é–∑·¥á·¥ò–Ω·¥á–π–º:</b> @{}",
        "user_removed": "<emoji document_id=5235875883297824772>üóì</emoji> <b>—é–∑·¥á·¥ò–Ω·¥á–π–º  è–¥·¥Ä–ª·¥á–Ω!</b>",
        "user_taken": "<emoji document_id=5237814653010076467>üóì</emoji> <b>—é–∑·¥á·¥ò–Ω·¥á–π–º @{}  è–∂·¥á –∑·¥Ä–Ω—è—Ç!</b>",
        "avatar_success": "<emoji document_id=5228764435362900200>üóì</emoji> <b>–≤·¥Ä—à·¥Ä ·¥Ä–≤·¥Ä—Ç·¥Ä·¥ò–∫·¥Ä –æ“ï–Ω–æ–≤–ª·¥á–Ω·¥Ä!</b>",
        "avatar_error": "<emoji document_id=5237814653010076467>üóì</emoji> <b>–æ—Ç–≤·¥á—Ç—å—Ç·¥á –Ω·¥Ä —Ñ–æ—Ç–æ —Å–æ–æ“ï—â·¥á–Ω–∏·¥á!</b>",
        "privacy_settings": "<emoji document_id=5237814653010076467>üóì</emoji> <b>–Ω·¥Ä—Å—Ç·¥ò–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥·¥á–Ω—Ü–∏·¥Ä–ª—å–Ω–æ—Å—Ç–∏:</b>\n\n{}",
        "arg_missing": "<emoji document_id=5237814653010076467>üóì</emoji> <b> è–∫·¥Ä–∂–∏—Ç·¥á ·¥Ä·¥ò–≥ è–º·¥á–Ω—Ç!</b>",
        "check_true": "<emoji document_id=5229132514060167056>üóì</emoji> <b>—é–∑·¥á·¥ò–Ω·¥á–π–º:</b> @{} <b>(–¥–æ—Å—Ç è–ø·¥á–Ω!)</b>",
        "check_false": "<emoji document_id=5235875883297824772>üóì</emoji> <b>—é–∑·¥á·¥ò–Ω·¥á–π–º:</b> @{} <b>(–Ω·¥á –¥–æ—Å—Ç è–ø·¥á–Ω!)</b>",
        "check_false_args": "<emoji document_id=5237814653010076467>üóì</emoji> <b>–ø–æ–∂·¥Ä–ª è–π—Å—Ç·¥Ä –≤–ø–∏—à–∏—Ç·¥á —é–∑·¥á·¥ò–Ω·¥á–π–º –∫–æ—Ç–æ·¥ò—ã–π –≤—ã —Ö–æ—Ç–∏—Ç·¥á –ø·¥ò–æ–≤·¥á·¥ò–∏—Ç—å...</b>",
        "full_profile_info": "<emoji document_id=5237814653010076467>üóì</emoji> –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:",
        "id": "<emoji document_id=5228764435362900200>üóì</emoji> –ò–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: @{}",
        "first_name": "<emoji document_id=5237814653010076467>üóì</emoji> –ù–µ–π–º: {}",
        "username": "<emoji document_id=5231112502573555738>üóì</emoji> –Æ–∑–µ—Ä–Ω–µ–π–º: @{}",
        "bio": "<emoji document_id=5233261334841289002>üóì</emoji> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {}",
        "is_bot": "<emoji document_id=5231188729653127746>üóì</emoji> –ë–æ—Ç-–ê–∫–∫–∞—É–Ω—Ç: {}",
        "verified": "<emoji document_id=5229132514060167056>üóì</emoji> –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã–π –ê–∫–∫–∞—É–Ω—Ç: {}",
        "restricted": "<emoji document_id=5235875883297824772>üóì</emoji> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {}",
        "privacy_everybody": "<emoji document_id=5235875883297824772>üóì</emoji> –í—Å–µ",
        "privacy_contacts": "<emoji document_id=5233429444156223307>üóì</emoji> –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "privacy_nobody": "<emoji document_id=5237814653010076467>üóì</emoji> –ù–∏–∫—Ç–æ"
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client


    @loader.command()
    async def setbio(self, message):
        """<–æ–ø–∏—Å–∞–Ω–∏–µ> - –∏–∑–º·¥á–Ω–∏—Ç—å “ï–∏–æ"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["arg_missing"])
            return

        try:
            await self._client(functions.account.UpdateProfileRequest(about=args))
            await utils.answer(message, self.strings["bio_success"].format(args))
        except Exception:
            await utils.answer(message, self.strings["error"])

    @loader.command()
    async def setname(self, message):
        """<–∏–º—è> - –∏–∑–º·¥á–Ω–∏—Ç—å –∏–º—è"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["arg_missing"])
            return

        try:
            await self._client(functions.account.UpdateProfileRequest(first_name=args))
            await utils.answer(message, self.strings["name_success"].format(args))
        except Exception:
            await utils.answer(message, self.strings["error"])

    @loader.command()
    async def setuser(self, message):
        """<—é–∑–µ—Ä–Ω–µ–π–º> - –∏–∑–º·¥á–Ω–∏—Ç—å —é–∑·¥á·¥ò–Ω·¥á–π–º (–æ—Å—Ç·¥Ä–≤—å—Ç·¥á –ø è—Å—Ç—ã–º –¥–ª—è  è–¥·¥Ä–ª·¥á–Ω–∏—è)"""
        args = utils.get_args_raw(message)

        try:
            await self._client(functions.account.UpdateUsernameRequest(username=args or ""))
            if args:
                await utils.answer(message, self.strings["user_success"].format(args))
            else:
                await utils.answer(message, self.strings["user_removed"])
        except Exception as e:
            if "USERNAME_OCCUPIED" in str(e):
                await utils.answer(message, self.strings["user_taken"].format(args))
            else:
                await utils.answer(message, self.strings["error"])

    @loader.command()
    async def setavatar(self, message):
        """<—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ> -  è—Å—Ç·¥Ä–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π ·¥Ä–≤·¥Ä—Ç·¥Ä·¥ò"""
        reply = await message.get_reply_message()
        if not reply or not reply.photo:
            await utils.answer(message, self.strings["avatar_error"])
            return

        try:
            file = await reply.download_media(bytes)
            await self._client(functions.photos.UploadProfilePhotoRequest(
                file=await self._client.upload_file(file)))
            await utils.answer(message, self.strings["avatar_success"])
        except Exception:
            await utils.answer(message, self.strings["error"])

    @loader.command()
    async def checkuser(self, message):
        """<—é–∑–µ—Ä–Ω–µ–π–º> - –ø·¥ò–æ–≤·¥á·¥ò—è·¥á—Ç –¥–æ—Å—Ç è–ø–Ω–æ—Å—Ç—å –∏–º·¥á–Ω–∏ –ø–æ–ª—å–∑–æ–≤·¥Ä—Ç·¥á–ª—è"""
        args = utils.get_args_raw(message)

        if not args:
            await utils.answer(message, self.strings["check_false_args"])
            return

        username = args.strip()

        result = await self.check_username_availability(username)

        if result:
            await utils.answer(message, self.strings["check_false"].format(username))
        else:
            await utils.answer(message, self.strings["check_true"].format(username))

    async def check_username_availability(self, username: str) -> bool:
        try:
            request = functions.account.CheckUsernameRequest(username=username)
            result = await self._client(request)
            return result
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–∞ {username}: {e}")
            return False
        
    @loader.command()
    async def profile(self, message):
        """- –ø–æ–ª è—á·¥Ä·¥á—Ç –∏ –æ—Ç–æ“ï·¥ò·¥Ä–∂·¥Ä·¥á—Ç –ø–æ–ª–Ω è—é –∏–Ω—Ñ–æ·¥ò–º·¥Ä—Ü–∏—é –æ –ø·¥ò–æ—Ñ–∏–ª·¥á –ø–æ–ª—å–∑–æ–≤·¥Ä—Ç·¥á–ª—è"""
        args = utils.get_args_raw(message)
        user_id = None
        if args:
            try:
                user_id = int(args)
            except ValueError:
                await utils.answer(message, "‚ùó ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
        else:
            user_id = message.sender_id
            full_user = await self._client(GetFullUserRequest(id=types.InputUser(user_id=user_id, access_hash=0)))

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            user = full_user.users[0]  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            profile = full_user.full_user  # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = self.strings["full_profile_info"] + "\n\n"
            text += self.strings["id"].format(user.id) + "\n"
            text += self.strings["first_name"].format(user.first_name) + "\n"
            text += self.strings["username"].format(user.username or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") + "\n"
            text += self.strings["bio"].format(profile.about or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") + "\n"
            text += self.strings["is_bot"].format(user.bot or "–ù–µ—Ç") + "\n"
            text += self.strings["verified"].format(user.verified or "–ù–µ—Ç") + "\n"
            text += self.strings["restricted"].format(user.restricted or "–ù–µ—Ç") + "\n"

            await utils.answer(message, text)

    @loader.command()
    async def getprivacy(self, message):
        """- –ø–æ–∫·¥Ä–∑·¥Ä—Ç—å —Ç·¥á–∫ è—â–∏·¥á –Ω·¥Ä—Å—Ç·¥ò–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥·¥á–Ω—Ü–∏·¥Ä–ª—å–Ω–æ—Å—Ç–∏"""
        last_seen = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyStatusTimestamp()
        ))
        phone = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyPhoneNumber()
        ))
        profile_photo = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyProfilePhoto()
        ))
        forwards = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyForwards()
        ))
        groups = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyChatInvite()
        ))
        call = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyPhoneCall()
        ))
        voice = await self._client(functions.account.GetPrivacyRequest(
            key=types.InputPrivacyKeyVoiceMessages()
        ))
        time_account_ttl = await self._client(functions.account.GetAccountTTLRequest(
        ))

        global_settings = await self._client(functions.account.GetGlobalPrivacySettingsRequest())
        
        privacy_info = (
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>–≤·¥ò·¥á–º—è –ø–æ—Å–ª·¥á–¥–Ω·¥á–≥–æ –ø–æ—Å·¥á—â·¥á–Ω–∏—è:</b> {self._format_privacy(last_seen.rules)}",
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>–Ω–æ–º·¥á·¥ò —Ç·¥á–ª·¥á—Ñ–æ–Ω·¥Ä:</b> {self._format_privacy(phone.rules)}",
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>—Ñ–æ—Ç–æ –ø·¥ò–æ—Ñ–∏–ª—è:</b> {self._format_privacy(profile_photo.rules)}",
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>–ø·¥á·¥ò·¥á—Å—ã–ª–∫·¥Ä —Å–æ–æ“ï—â·¥á–Ω–∏–π:</b> {self._format_privacy(forwards.rules)}",
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>–ø·¥ò–∏–≥–ª·¥Ä—à·¥á–Ω–∏—è –≤ –≥·¥ò è–ø–ø—ã:</b> {self._format_privacy(groups.rules)}",
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>–∫·¥ò è–∂–∫–∏/–≥–æ–ª–æ—Å–æ–≤—ã·¥á:</b> {self._format_privacy(voice.rules)}",
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>–∑–≤–æ–Ω–∫–∏:</b> {self._format_privacy(call.rules)}",
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b> è—Å—Ç·¥Ä–Ω–æ–≤–ª·¥á–Ω–Ω·¥Ä—è –¥·¥Ä—Ç·¥Ä  è–¥·¥Ä–ª·¥á–Ω–∏·¥á ·¥Ä–∫–∫·¥Ä è–Ω—Ç·¥Ä:</b> {time_account_ttl.days} –î–Ω–µ–π\n"
            f"<emoji document_id=5231112502573555738>üóì</emoji> <b>·¥Ä·¥ò—Ö–∏–≤ –∏ –Ω–æ–≤—ã·¥á —á·¥Ä—Ç—ã:</b> {'<emoji document_id=5237814653010076467>üóì</emoji> –°–∫—Ä—ã—Ç–æ' if global_settings.archive_and_mute_new_noncontact_peers else '<emoji document_id=5229132514060167056>üóì</emoji> –ù–µ —Å–∫—Ä—ã—Ç–æ'}"
        )

        await utils.answer(
            message,
            self.strings["privacy_settings"].format("\n".join(privacy_info))
            )    

    def _format_privacy(self, rules):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        if any(isinstance(rule, types.PrivacyValueAllowAll) for rule in rules):
            return "<emoji document_id=5235875883297824772>üóì</emoji> –í—Å–µ"
        elif any(isinstance(rule, types.PrivacyValueAllowContacts) for rule in rules):
            return "<emoji document_id=5233429444156223307>üóì</emoji> –ö–æ–Ω—Ç–∞–∫—Ç—ã"
        elif any(isinstance(rule, types.PrivacyValueDisallowContacts) for rule in rules):
            return "<emoji document_id=5229132514060167056>üóì</emoji> –ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è"
        else:
            return "<emoji document_id=5237814653010076467>üóì</emoji> –ù–∏–∫—Ç–æ"